use std::io;
use std::{thread, time};

use web3::contract::Contract;
use web3::transports::Http;
use web3::types::H160;
use web3_rust_wrapper::Web3Manager;

use csv::{self, ReaderBuilder};

#[tokio::main]
async fn main() -> web3::Result<()> {
    dotenv::dotenv().ok();

    //const ethRpcUrlHttp = "https://eth-goerli.nodereal.io/v1/703500179cfc4348b90bebc0b3fba854";
    //const ethRpcUrlWebsockets = "wss://eth-goerli.nodereal.io/ws/v1/703500179cfc4348b90bebc0b3fba854";

    let web3_http_url = "https://eth-goerli.nodereal.io/v1/703500179cfc4348b90bebc0b3fba854";
    let web3_websocket_url = "wss://eth-goerli.nodereal.io/ws/v1/703500179cfc4348b90bebc0b3fba854";

    //let web3_http_url = "https://bsc-testnet.nodereal.io/v1/d4224d2458594df5830eb45cdef8b45b";
    //let web3_websocket_url = "wss://bsc-testnet.nodereal.io/ws/v1/d4224d2458594df5830eb45cdef8b45b";

    let mut web3m: Web3Manager = Web3Manager::new(web3_http_url, web3_websocket_url, 5).await;

    // load acount from .env file
    web3m
        .load_account(
            "0xe21Ce03236B84926c68f790a7d9D50E55dA772bC",
            "647e7f5b84e301ae4890cca81e6cb01a31f56574ea4ecde352f7a8c836486378",
        )
        .await;
    let account: H160 = web3m.first_loaded_account();

    let contract_abi = include_bytes!("../abi/TokenAbi.json");
    let contract_address = "0xc43aF0698bd618097e5DD933a04F4e4a5A806834";
    let contract_instance: Contract<Http> = web3m
        .instance_contract(contract_address, contract_abi)
        .await
        .unwrap();

    let mut addresses: Vec<String> = Vec::new();
    let mut amounts: Vec<String> = Vec::new();

    let path = "./out.csv";
    let mut reader = ReaderBuilder::new()
        .delimiter(b',')
        .from_path(path)
        .unwrap();
    for result in reader.records() {
        let record = result.unwrap();
        let mut c = 0;
        for field in &record {
            if c == 0 {
                addresses.push(field.to_string());
            } else {
                amounts.push(field.to_string());
            }
            c += 1;

            if c > 1 {
                c = 0;
            }
        }
    }

    for (i, el) in addresses.iter().enumerate() {
        println!("{}: {} : {}", i, addresses[i], amounts[i]);
        web3m
            .sent_erc20_token(
                account,
                contract_instance.clone(),
                addresses[i].clone().as_str(),
                "1000000000000000000",
            )
            .await;
        thread::sleep(time::Duration::from_millis(200));
    }

    /*
    web3m
        .sent_erc20_token(
            web3m.first_loaded_account(),
            contract_instance,
            "0xc43aF0698bd618097e5DD933a04F4e4a5A806834",
            "1000000000000000000",
        )
        .await;
        */

    Ok(())
}
